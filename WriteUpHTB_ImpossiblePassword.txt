 ______________________________________________
[                                              ]
[   WRITE UP DU CRACKME "Impossible Password"  ]
[            sur HTB           	               ]
[                                              ]
[     PAR S01den                               ]
[                                              ]
[_________________________________07/06/2018___]



Bon bon bon...


----------------------------------------------------------------------------------------------------------------------------------------

ltrace ./impossible_password.bin 
__libc_start_main(0x40085d, 1, 0x7ffe3da92138, 0x4009e0 <unfinished ...>
printf("* ")                                                                                                                  = 2
__isoc99_scanf(0x400a82, 0x7ffe3da92030, 0x7f407e2c9780, 2* 

----------------------------------------------------------------------------------------------------------------------------------------

On doit entrer quelque chose, entrons "A":

----------------------------------------------------------------------------------------------------------------------------------------

A
)                                                                   = 1
printf("[%s]\n", "A"[A]
)                                                                                                         = 4
strcmp("A", "SuperSeKretKey")                                                                                                 = -18
exit(1 <no return ...>
+++ exited (status 1) +++

----------------------------------------------------------------------------------------------------------------------------------------

Evidemment, ce n'est pas le bon mot de passe, mais ce que nous avons entré est comparé à "SuperSeKretKey", qui est le bon pass

On relance le programme avec ltrace, on entre SuperSeKretKey comme premier pass, et on nous demande un nouveau pass 
(destructeur, t'aurais pu faire plus explicite que de mettre des astérisques :p)
On entre encore A:

----------------------------------------------------------------------------------------------------------------------------------------

__isoc99_scanf(0x400a82, 0x7fffe3841790, 0x7fca6c208780, 3** A
)                                                                   = 1
time(0)                                                                                                                       = 1528378448
srand(0x1f75bd51, 1, 0x1df81640, 10)                                                                                          = 0
malloc(21)                                                                                                                    = 0x928830
rand(0, 0x928840, 0x928830, 0x7fca6c206b20)                                                                                   = 0x42c9e66c
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928830, 94)                                                                            = 0x3c5b69d1
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928831, 94)                                                                            = 0x5fb8c2d0
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928832, 94)                                                                            = 0x47e4edf9
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928833, 94)                                                                            = 0x46f7fc4d
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928834, 94)                                                                            = 0x545ad786
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928835, 94)                                                                            = 0x18e007fc
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928836, 94)                                                                            = 0x603c7299
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928837, 94)                                                                            = 0x62ba806f
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928838, 94)                                                                            = 0x5647bde6
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928839, 94)                                                                            = 0x1f2934f9
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883a, 94)                                                                            = 0x5c42e602
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883b, 94)                                                                            = 0x3cc95bf6
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883c, 94)                                                                            = 0x3e71efd9
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883d, 94)                                                                            = 0x6350673c
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883e, 94)                                                                            = 0x250b05e7
rand(0x7fca6c206620, 0x7fffe38416fc, 0x92883f, 94)                                                                            = 0x11937758
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928840, 94)                                                                            = 0x2301fdf2
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928841, 94)                                                                            = 0x341d070e
rand(0x7fca6c206620, 0x7fffe38416fc, 0x928842, 94)                                                                            = 0x558b9ab4
strcmp("A", "Itm:v}/\\NYj!50W|SSsg")                                                                                          = -8
+++ exited (status 248) +++

----------------------------------------------------------------------------------------------------------------------------------------

Hum, ce à quoi est comparé notre pass est généré aléatoirement, c'est pas cool ça.
C'est donc impossible à trouver (comme indique le titre du fichier, "impossible_password.bin")
On va donc bypass la comparaison pour le deuxième pass pour afficher directement la sortie du programme lorsque les deux pass sont bons.

On affiche l'entry point du programme:

----------------------------------------------------------------------------------------------------------------------------------------

readelf -h impossible_password.bin 
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x4006a0
  Start of program headers:          64 (bytes into file)
  Start of section headers:          4512 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         28
  Section header string table index: 27

----------------------------------------------------------------------------------------------------------------------------------------

Et on désassemble le programme avec radare2:

r2 impossible_password.bin 
 -- I love the smell of bugs in the morning.
[0x004006a0]> pd 300 @ 0x4006a0

Je vous épargne les 300 lignes, ce qui nous intéresse est la seconde comparaison, le second strcmp; qui est situé en 0x00400961
On quitte radare2, on ouvre gdb et on pose un bp en 0x00400961.
On lance, on entre SuperSeKretKey comme premier pass et A comme second pass puis on arrive sur notre breakpoint.

   0x400961:	call   0x400630 <strcmp@plt>  Notre A est comparé à une chaine de caractères aléatoire, et si ils sont égaux, rax est mis à 0. 
=> 0x400966:	test   eax,eax		si eax = 0, on met le ZF (zero flag) à 1
   0x400968:	jne    0x400976		si ZF = 0, on saute en 0x400976

Après avoir vu ça, ce que l'on veut c'est avoir eax à 0. Faisons ni pour passer à test eax,eax: on voit que rax (eax en 64 bits) est égal à 0xffffffquelquechose.
On veut que rax soit égal à 0, on fait donc: set $rax = 0
Et hop, on fait ni, on tombe sur le jne, on refait un ni et on ne saute pas !
On continue l'execution du programme avec c; et on obtient un flag !


Continuing.
HTB{40b949f92b86b18}
[Inferior 1 (process 1611) exited with code 012]


HTB{40b949f92b86b18} est notre flag. 



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Mon mail si vous voulez me remercier, m'insulter, me conseiller, me corriger des trucs ou encore me raconter votre vie voire m'envoyer des lettres d'amour: S01den@protonmail.com
